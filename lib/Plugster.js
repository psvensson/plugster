// Generated by CoffeeScript 1.9.2
(function() {
  var Plugster, promise, uuid;

  uuid = require('node-uuid');

  promise = require('node-promise');

  Plugster = (function() {
    Plugster.modules = [];

    function Plugster(name, ports) {
      this.name = name;
      this.input = ports.input;
      this.output = {};
      ports.output.forEach((function(_this) {
        return function(portName) {
          return _this.output[portName] = void 0;
        };
      })(this));
      Plugster.modules[this.name] = this;
    }

    Plugster.prototype.wire = function(outputPortName, inputModule, inputPortName) {
      console.log('Plugster::wire wiring module "' + this.name + '" port "' + outputPortName + '" to module "' + inputModule.name + '" port "' + outputPortName + '"');
      return this.output[outputPortName] = {
        inputModuleName: inputModule.name,
        inputPortName: inputPortName
      };
    };

    Plugster.prototype.isWiredTo = function(outputPortName, inputModuleName, inputPortName) {
      return this.output[outputPortName] && this.output[outputPortName].inputModuleName === inputModuleName && this.output[outputPortName].inputPortName === inputPortName;
    };

    Plugster.prototype.send = function(outputPortName, data) {
      var iModule, iPort, wire;
      wire = this.output[outputPortName];
      console.log('Plugster::send sending data from module "' + this.name + '" port "' + outputPortName + '" to module "' + wire.inputModuleName + '" port "' + wire.inputPortName + '"');
      iModule = Plugster.modules[wire.inputModuleName];
      iPort = iModule.input[wire.inputPortName];
      if (iPort) {
        iPort(data);
        return true;
      } else {
        console.log('Plugster::send could find no connected input port function for module "' + wire.inputModuleName + '" port "' + wire.inputPortName);
        return false;
      }
    };

    return Plugster;

  })();

  module.exports = Plugster;

}).call(this);

//# sourceMappingURL=Plugster.js.map
